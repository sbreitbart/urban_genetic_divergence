## Weevil scars: standardized by June height
### lmer: diagnostics
```{r}
# GRADIENT / CITY_DIST-----

# weev_stn_gr_city_m1 <- lmer(scar_div_Juneheight ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both, REML = F)
# sjPlot::plot_model(weev_stn_gr_city_m1, type = "diag") # is singular & right-skewed
# 
# weev_stn_gr_city_m2 <- lmer(log(scar_div_Juneheight + 1) ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both, REML = F)
# sjPlot::plot_model(weev_stn_gr_city_m2, type = "diag") # sqrt, cube root, log still look bad... try binomial, then removing zeroes and going from there


# TAKING OUT PLANTS W/ZERO SCAR LENGTH & FITTING A BINOMIAL MODEL
## THEN I'LL USE >0 DATA AND LOOK AT QUANTITATIVE MEASUREMENTS

# recode plants as having height or not
weevil_both$scar_div_Juneheight_binary <- weevil_both$scar_div_Juneheight
weevil_both$scar_div_Juneheight_binary[weevil_both$scar_div_Juneheight_binary > 0] <- 1

weev_stn_gr_city_m3 <- glmer((scar_div_Juneheight_binary) ~ (1|Block) + (1|Population/Family) + City_dist,
  data = weevil_both,
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(weev_stn_gr_city_m3)
plot(res)
# looks great! 
summary(weev_stn_gr_city_m3)

car::Anova(weev_stn_gr_city_m3) # not sig- so, whether the plant was attacked by weevils not associated with urbanization


# weev_stn_gr_city_m4 <- lmer(scar_div_Juneheight ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_city_m4, type='diag') #very right-skewed... try sqrt
# 
# weev_stn_gr_city_m5 <- lmer(sqrt(scar_div_Juneheight) ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_city_m5, type='diag') # still r-skew... try cube rt
# 
# weev_stn_gr_city_m6 <- lmer((scar_div_Juneheight)^(1/3) ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_city_m6, type='diag') # still r-skew... try log
# 
# weev_stn_gr_city_m7 <- lmer(log(scar_div_Juneheight) ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_city_m7, type='diag') # much better but qqplot suspicious... good enough, I guess... still singular though. Take out block
# 
# weev_stn_gr_city_m8 <- lmer(log(scar_div_Juneheight) ~ (1|Population/Family) + City_dist,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out /Fam
# 
# weev_stn_gr_city_m9 <- lmer(log(scar_div_Juneheight) ~ (1|Block) + (1|Population) + City_dist,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out block
# 
# weev_stn_gr_city_m10 <- lmer(log(scar_div_Juneheight) ~ (1|Population) +  City_dist,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... 


# try glmmTMB
# test1 <- glmmTMB(log(scar_div_Juneheight) ~ (1|Population) + City_dist,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   family = gaussian) # it works!
# 
# test1 <- glmmTMB(log(scar_div_Juneheight) ~ (1|Population/Family) + City_dist,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   family = gaussian) # it works! 

weev_stn_gr_city_m11 <- glmmTMB(log(scar_div_Juneheight) ~ (1|Population/Family) + (1|Block) + City_dist,
  data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
  family = gaussian) # it works! use this


# GRADIENT / URB SCORE-----

# weev_stn_gr_usc_m1 <- lmer(scar_div_Juneheight ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both, REML = F)
# sjPlot::plot_model(weev_stn_gr_usc_m1, type = "diag") # is singular & right-skewed
# 
# weev_stn_gr_usc_m2 <- lmer((scar_div_Juneheight)^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both, REML = F)
# sjPlot::plot_model(weev_stn_gr_usc_m2, type = "diag") # sqrt, cube root, log still look bad... try binomial, then removing zeroes and going from there


# TAKING OUT PLANTS W/ZERO SCAR LENGTH & FITTING A BINOMIAL MODEL
## THEN I'LL USE >0 DATA AND LOOK AT QUANTITATIVE MEASUREMENTS
weev_stn_gr_usc_m3 <- glmer((scar_div_Juneheight_binary) ~ (1|Block) + (1|Population/Family) + Urb_score,
  data = weevil_both,
family = "binomial"(link = "logit"),
  nAGQ = 0,
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(weev_stn_gr_usc_m3)
plot(res)
# looks great! 
summary(weev_stn_gr_usc_m3)

car::Anova(weev_stn_gr_usc_m3) # not sig- so, whether the plant was attacked by weevils not associated with urbanization


# weev_stn_gr_usc_m4 <- lmer(scar_div_Juneheight ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_usc_m4, type='diag') #very right-skewed... try sqrt
# 
# weev_stn_gr_usc_m5 <- lmer(sqrt(scar_div_Juneheight) ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_usc_m5, type='diag') # still r-skew... try cube rt
# 
# weev_stn_gr_usc_m6 <- lmer((scar_div_Juneheight)^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_usc_m6, type='diag') # still r-skew... try log
# 
# weev_stn_gr_usc_m7 <- lmer(log(scar_div_Juneheight) ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_usc_m7, type='diag') # much better but qqplot suspicious...still singular though. Take out block
# 
# weev_stn_gr_usc_m8 <- lmer(log(scar_div_Juneheight) ~ (1|Population/Family) + Urb_score,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out Fam
# 
# weev_stn_gr_usc_m10 <- lmer(log(scar_div_Juneheight) ~ (1|Block) + (1|Population) + Urb_score,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out block too
# 
# weev_stn_gr_usc_m11 <- lmer(log(scar_div_Juneheight) ~ (1|Population) + Urb_score,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... 


# try glmmTMB
weev_stn_gr_usc_m12 <- glmmTMB(log(scar_div_Juneheight) ~ (1|Population/Family) + (1|Block) + Urb_score,
  data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
  family = gaussian) # it works! use this







# URB SUBTRANSECTS / CITY_DIST-----

# weev_stn_urbsubs_city_m1 <- lmer(scar_div_Juneheight ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F)
# sjPlot::plot_model(weev_stn_urbsubs_city_m1, type = "diag") # right-skewed
# 
# weev_stn_urbsubs_city_m2 <- lmer(sqrt(scar_div_Juneheight) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F,
#     control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_urbsubs_city_m2, type = "diag") # still very right-skewed...
# 
# weev_stn_urbsubs_city_m3 <- lmer((scar_div_Juneheight)^(1/3) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F,
#     control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_urbsubs_city_m3, type = "diag") # still very right-skewed... should take out zeroes and look at binomial, then quantatitative

# TAKING OUT PLANTS W/ZERO SCAR LENGTH & FITTING A BINOMIAL MODEL
## THEN I'LL USE >0 DATA AND LOOK AT QUANTITATIVE MEASUREMENTS
weev_stn_urbsubs_city_m4 <- glmer((scar_div_Juneheight_binary) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
  data = weevil_both %>% filter(Urb_Rur == "Urban"),
  family = "binomial"(link = "logit"),
  nAGQ = 0,
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(weev_stn_urbsubs_city_m4)
plot(res)
# looks great! 

car::Anova(weev_stn_urbsubs_city_m4) # not sig- so, whether the plant was attacked by weevils not associated with urbanization nor urban subtr

# main effects
weev_stn_urbsubs_city_m4_ME <- glmer((scar_div_Juneheight_binary) ~ (1|Block) + (1|Population/Family) + City_dist + Transect_ID,
  data = weevil_both %>% filter(Urb_Rur == "Urban"),
  family = "binomial"(link = "logit"),
  nAGQ = 0,
control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

# weev_stn_urbsubs_city_m4 <- lmer(scar_div_Juneheight ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_urbsubs_city_m4, type='diag') #very right-skewed... try sqrt
# 
# weev_stn_urbsubs_city_m5 <- lmer(sqrt(scar_div_Juneheight) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_urbsubs_city_m5, type='diag') #still right-skewed... though better... try cube root
# 
# weev_stn_urbsubs_city_m6 <- lmer((scar_div_Juneheight)^(1/3) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_urbsubs_city_m6, type='diag') # looks pretty good... try log
# 
# 
# weev_stn_urbsubs_city_m7 <- lmer(log(scar_div_Juneheight + 0.1) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_urbsubs_city_m7, type='diag') # looks the same as cube root but maybe a little better? still singular though. Take out block
# 
# weev_stn_urbsubs_city_m8 <- lmer(log(scar_div_Juneheight) ~ (1|Population/Family) +  City_dist * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out Fam
# 
# weev_stn_urbsubs_city_m9 <- lmer(log(scar_div_Juneheight) ~ (1|Block) + (1|Population) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) #  singular... take out block
# 
# weev_stn_urbsubs_city_m10 <- lmer(log(scar_div_Juneheight) ~  (1|Population) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"), 
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) #  singular... 


# try glmmTMB
weev_stn_urbsubs_city_m11 <- glmmTMB(log(scar_div_Juneheight) ~ (1|Population/Family) + (1|Block) + City_dist * Transect_ID,
  data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"), 
  family = gaussian) # it works! use this



# main effects
# test2 <- glmmTMB(log(scar_div_Juneheight) ~ (1|Population/Family) + (1|Block) + City_dist + Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"), 
#   family = gaussian) # singular,,, taje out block
# 
# weev_stn_urbsubs_city_m11_ME.1 <- glmmTMB(log(scar_div_Juneheight) ~ (1|Population/Family)  + City_dist + Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"), 
#   family = gaussian) # works now. Take out block and put back in Family to see if it changes

weev_stn_urbsubs_city_m11_ME.2 <- glmmTMB(log(scar_div_Juneheight) ~ + (1|Block) + (1|Population)  + City_dist + Transect_ID,
  data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"), 
  family = gaussian) # works too

car::Anova(weev_stn_urbsubs_city_m11)
car::Anova(weev_stn_urbsubs_city_m11_ME.1)
car::Anova(weev_stn_urbsubs_city_m11_ME.2) # these results much more similar to full model than model above (.1) so will use this.


# URB SUBTRANSECTS / URB SCORE-----

# weev_stn_urbsubs_usc_m1 <- lmer(scar_div_Juneheight ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F)
# sjPlot::plot_model(weev_stn_urbsubs_usc_m1, type = "diag") # right-skewed
# 
# weev_stn_urbsubs_usc_m2 <- lmer(sqrt(scar_div_Juneheight) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F,
#     control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_urbsubs_usc_m2, type = "diag") # still very right-skewed...
# 
# weev_stn_urbsubs_usc_m3 <- lmer((scar_div_Juneheight)^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F,
#     control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_urbsubs_usc_m3, type = "diag") # still very right-skewed... should take out zeroes and look at binomial, then quantatitative

# TAKING OUT PLANTS W/ZERO SCAR LENGTH & FITTING A BINOMIAL MODEL
## THEN I'LL USE >0 DATA AND LOOK AT QUANTITATIVE MEASUREMENTS
weev_stn_urbsubs_usc_m4 <- glmer((scar_div_Juneheight_binary) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
  data = weevil_both %>% filter(Urb_Rur == "Urban"),
  family = "binomial"(link = "logit"),
    nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(weev_stn_urbsubs_usc_m4)
plot(res)
# looks great! 

car::Anova(weev_stn_urbsubs_usc_m4) # not sig- so, whether the plant was attacked by weevils not associated with urbanization nor urban subtr

# main effects
weev_stn_urbsubs_usc_m4_ME <- glmer((scar_div_Juneheight_binary) ~ (1|Block) + (1|Population/Family) + Urb_score + Transect_ID,
  data = weevil_both %>% filter(Urb_Rur == "Urban"),
  family = "binomial"(link = "logit"),
    nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))


# weev_stn_gr_usc_m4 <- lmer(scar_div_Juneheight ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_usc_m4, type='diag') #very right-skewed... try sqrt
# 
# weev_stn_gr_usc_m5 <- lmer(sqrt(scar_div_Juneheight) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_usc_m5, type='diag') #still right-skewed... though better... try cube root
# 
# weev_stn_gr_usc_m6 <- lmer((scar_div_Juneheight)^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_usc_m6, type='diag') # looks pretty good... try log
# 
# 
# weev_stn_gr_usc_m7 <- lmer(log(scar_div_Juneheight + 0.1) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_stn_gr_usc_m7, type='diag') # looks the same as cube root but maybe a little better? still singular though...Take out block
# 
# weev_stn_gr_usc_m8 <- lmer(log(scar_div_Juneheight) ~ (1|Population/Family) +  Urb_score * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out Fam
# 
# weev_stn_gr_usc_m9 <- lmer(log(scar_div_Juneheight) ~ (1|Block) + (1|Population) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) #  singular... take out block
# 
# weev_stn_gr_usc_m10 <- lmer(log(scar_div_Juneheight) ~ (1|Population) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) #  singular... 



# try glmmTMB
weev_stn_usc_usc_m10 <- glmmTMB(log(scar_div_Juneheight) ~ (1|Population/Family) + (1|Block) + Urb_score * Transect_ID,
  data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"), 
  family = gaussian) # it works! use this



# main effects
# test2 <- glmmTMB(log(scar_div_Juneheight) ~ (1|Population/Family) + (1|Block) + Urb_score + Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#   family = gaussian) # singular,,, taje out block
# 
# weev_stn_usc_usc_m10_ME.1 <- glmmTMB(log(scar_div_Juneheight) ~ (1|Population/Family)  + Urb_score + Transect_ID,
#   data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#   family = gaussian) # works now. Take out block and put back in Family to see if it changes

weev_stn_usc_usc_m10_ME.2 <- glmmTMB(log(scar_div_Juneheight) ~ + (1|Block) + (1|Population)  + Urb_score + Transect_ID,
  data = weevil_both %>% filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"), 
  family = gaussian) # works too

car::Anova(weev_stn_usc_usc_m10)
car::Anova(weev_stn_usc_usc_m10_ME.1)
car::Anova(weev_stn_usc_usc_m10_ME.2) # these results much more similar to full model than model above (.1) so will use this.


```

### Entire gradient: *Not sig for either
#### City_dist
```{r}
car::Anova(weev_stn_gr_city_m3) # binomial: not sig
car::Anova(weev_stn_gr_city_m11) # quantitative: not sig


# 
# # ANy variation within families or populations?
# m.1 <- lmer(log(scar_div_Juneheight) ~ (1|Population/Family),
#             data = weevil_both %>% filter(scar_div_Juneheight_binary == 1),
#             REML = T)
# 
# ranova(m.1)
# # No for both
# 
# 
# sum.1 <- summary(m.1)
# 
# variances1 <- print(VarCorr(m.1),comp="Variance") %>%
#   as.data.frame() %>%
#   dplyr::mutate(., PVE = vcov / sum(vcov)) %>%
#   dplyr::select(., c(grp, vcov, PVE)) %>%
#   dplyr::rename(., Group = grp,
#                 Variance = vcov)
# 
# 
# write.table(ranova(m.1), here::here("./Figures_Tables/ranova_PVE/2020_Weevildivheight_lmer_PVE.csv"), col.names=TRUE, sep=",")
# write.table(variances1, here::here("./Figures_Tables/ranova_PVE/2020_Weevildivheight_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)
```

#### Urb_score
```{r}
car::Anova(weev_stn_gr_usc_m3) # binomial: not sig
car::Anova(weev_stn_gr_usc_m12) # quantitative: not sig

```


### Urban subtransects: *Marg sig transect for city_dist
#### City_dist
```{r}
car::Anova(weev_stn_urbsubs_city_m4) # binomial: nothing sig
car::Anova(weev_stn_urbsubs_city_m4_ME) # binomial: nothing sig
car::Anova(weev_stn_urbsubs_city_m11) # quantitative: transect marg sig
car::Anova(weev_stn_urbsubs_city_m11_ME.2) #quant main effects: transect marg sig

AIC(weev_stn_urbsubs_city_m11, weev_stn_urbsubs_city_m11_ME.2) # main effects has sig lower AIC

# 
# # ANy variation among families or populations?
# m.1 <- lmer(log(scar_div_Juneheight) ~ (1|Population/Family),
#             data = weevil_both %>%
#               filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#             REML = T)
# ranova(m.1)
# # no, is singular
# 
# 
# m.2 <- lmer(log(scar_div_Juneheight) ~ (1|Population/Family) + Transect_ID,
#             data = weevil_both %>%
#               filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#             REML = F)
# car::Anova(m.2)
# # not among transects either
# 
# 
# m.3 <- lmer(log(scar_div_Juneheight) ~ (1|Population/Family) + Transect_ID,
#               data = weevil_both %>%
#               filter(scar_div_Juneheight_binary == 1 & Urb_Rur == "Urban"),
#             REML = T)
# car::Anova(m.3)
# # not sig in this or m.2
# 
# 
# sum.1 <- summary(m.1)
# 
# variances1 <- print(VarCorr(m.1),comp="Variance") %>%
#   as.data.frame() %>%
#   dplyr::mutate(., PVE = vcov / sum(vcov)) %>%
#   dplyr::select(., c(grp, vcov, PVE)) %>%
#   dplyr::rename(., Group = grp,
#                 Variance = vcov)
# 
# 
# write.table(ranova(m.1), here::here("./Figures_Tables/ranova_PVE/2020_Weevildivheight_urban_lmer_PVE.csv"), col.names=TRUE, sep=",")
# write.table(variances1, here::here("./Figures_Tables/ranova_PVE/2020_Weevildivheight_urban_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)
# write.table(car::Anova(m.2), here::here("./Figures_Tables/ranova_PVE/2020_Weevildivheight_urban_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)
```

#### Urb_score
```{r}
car::Anova(weev_stn_urbsubs_usc_m4) # binomial: not sig
car::Anova(weev_stn_usc_usc_m10) # quantitative: not sig
car::Anova(weev_stn_usc_usc_m10_ME.2)

AIC(weev_stn_usc_usc_m10, weev_stn_usc_usc_m10_ME.2) # ME better but <2 AIC away
```


### Export ANOVA
```{r}
# anova_table_flx(weev_stn_gr_city_m3)
# anova_table_flx(weev_stn_gr_city_m11)
# anova_table_flx(weev_stn_gr_usc_m3)
# anova_table_flx(weev_stn_gr_usc_m12)
# 
# anova_table_flx(weev_stn_urbsubs_city_m4)
# anova_table_flx(weev_stn_urbsubs_city_m4_ME)
# anova_table_flx(weev_stn_urbsubs_city_m11)
# anova_table_flx(weev_stn_urbsubs_city_m11_ME.2)
# 
# anova_table_flx(weev_stn_urbsubs_usc_m4)
# anova_table_flx(weev_stn_urbsubs_usc_m4_ME)
# anova_table_flx(weev_stn_usc_usc_m10)
# anova_table_flx(weev_stn_usc_usc_m10_ME.2)
# 
# 
# AIC_compare.city_dist_transf_binomial(weev_stn_urbsubs_city_m4,
#                       weev_stn_urbsubs_city_m4_ME)
# 
# AIC_compare.city_dist_transf_quantitative(weev_stn_urbsubs_city_m11,
#                       weev_stn_urbsubs_city_m11_ME.2)
# 
# AIC_compare.urb_score_transf_binomial(weev_stn_urbsubs_usc_m4,
#                       weev_stn_urbsubs_usc_m4_ME)
# 
# AIC_compare.urb_score_transf_quantitative(weev_stn_usc_usc_m10,
#                       weev_stn_usc_usc_m10_ME.2) 

```

## Weevil scars: NOT standardized by June height
### lmer
```{r}
# GRADIENT / CITY_DIST-----

# weev_gr_city_m1 <- lmer(Scar_length_cm ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both,
#   REML = F,
#     control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_city_m1, type = "diag") # right-skewed
# 
# weev_gr_city_m2 <- lmer(sqrt(Scar_length_cm) ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both, REML = F,
#       control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_city_m2, type = "diag") # sqrt, cube root, log still look bad... try binomial, then removing zeroes and going from there


# TAKING OUT PLANTS W/ZERO SCAR LENGTH & FITTING A BINOMIAL MODEL
## THEN I'LL USE >0 DATA AND LOOK AT QUANTITATIVE MEASUREMENTS

# recode plants as having height or not
weevil_both$Scar_length_cm_binary <- weevil_both$Scar_length_cm
weevil_both$Scar_length_cm_binary[weevil_both$Scar_length_cm_binary > 0] <- 1

weev_gr_city_m3 <- glmer((Scar_length_cm_binary) ~ (1|Block) + (1|Population/Family) + City_dist,
  data = weevil_both,
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(weev_gr_city_m3)
plot(res)
# looks great! 
summary(weev_gr_city_m3)

car::Anova(weev_gr_city_m3) # not sig- so, whether the plant was attacked by weevils not associated with urbanization


# weev_gr_city_m4 <- lmer(Scar_length_cm ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_city_m4, type='diag') #very right-skewed... try sqrt
# 
# weev_gr_city_m5 <- lmer(sqrt(Scar_length_cm) ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_city_m5, type='diag') # still r-skew... try cube rt
# 
# weev_gr_city_m6 <- lmer((Scar_length_cm)^(1/3) ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_city_m6, type='diag') # still r-skew... try log
# 
# weev_gr_city_m7 <- lmer(log(Scar_length_cm) ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_city_m7, type='diag') # much better  still singular though. Take out block
# 
# weev_gr_city_m8 <- lmer(log(Scar_length_cm) ~ (1|Population/Family) + City_dist,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out Fam
# 
# weev_gr_city_m9 <- lmer(log(Scar_length_cm) ~ (1|Block) + (1|Population) + City_dist,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out block
# 
# weev_gr_city_m10 <- lmer(log(Scar_length_cm) ~ (1|Population) + City_dist,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... 

# try glmmTMB
weev_gr_city_m11 <- glmmTMB(log(Scar_length_cm) ~ (1|Population/Family) + (1|Block) + City_dist,
  data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"), 
  family = gaussian) # it works! use this




# GRADIENT / URB SCORE-----

# weev_gr_usc_m1 <- lmer(Scar_length_cm ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both, REML = F,
#     control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_usc_m1, type = "diag") # right-skewed
# 
# weev_gr_usc_m2 <- lmer((Scar_length_cm)^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both, REML = F,
#     control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_usc_m2, type = "diag") # sqrt, cube root, log still look bad... try binomial, then removing zeroes and going from there


# TAKING OUT PLANTS W/ZERO SCAR LENGTH & FITTING A BINOMIAL MODEL
## THEN I'LL USE >0 DATA AND LOOK AT QUANTITATIVE MEASUREMENTS
weev_gr_usc_m3 <- glmer((Scar_length_cm_binary) ~ (1|Block) + (1|Population/Family) + Urb_score,
  data = weevil_both,
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(weev_gr_usc_m3)
plot(res)
# looks great! 
summary(weev_gr_usc_m3)

car::Anova(weev_gr_usc_m3) # not sig- so, whether the plant was attacked by weevils not associated with urbanization


# weev_gr_usc_m4 <- lmer(Scar_length_cm ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_usc_m4, type='diag') #very right-skewed... try sqrt
# 
# weev_gr_usc_m5 <- lmer(sqrt(Scar_length_cm) ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_usc_m5, type='diag') # still r-skew... try cube rt
# 
# weev_gr_usc_m6 <- lmer((Scar_length_cm)^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_usc_m6, type='diag') # still r-skew... try log
# 
# weev_gr_usc_m7 <- lmer(log(Scar_length_cm) ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_gr_usc_m7, type='diag') # much better but qqplot suspicious... good enough, I guess still singular though. Take out block
# 
# weev_gr_usc_m8 <- lmer(log(Scar_length_cm) ~ (1|Population/Family) + Urb_score,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out /Fam
# 
# weev_gr_usc_m9 <- lmer(log(Scar_length_cm) ~ (1|Block) + (1|Population) + Urb_score,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out block
# 
# weev_gr_usc_m10 <- lmer(log(Scar_length_cm) ~ (1|Population) + Urb_score,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... 

# try glmmTMB
weev_gr_usc_m10 <- glmmTMB(log(Scar_length_cm) ~ (1|Population/Family) + (1|Block) + Urb_score,
  data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"), 
  family = gaussian) # it works! use this


# URB SUBTRANSECTS / CITY_DIST-----

# weev_urbsubs_city_m1 <- lmer(Scar_length_cm ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F)
# sjPlot::plot_model(weev_urbsubs_city_m1, type = "diag") # right-skewed
# 
# weev_urbsubs_city_m2 <- lmer(sqrt(Scar_length_cm) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F,
#     control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_city_m2, type = "diag") # still very right-skewed...
# 
# weev_urbsubs_city_m3 <- lmer((Scar_length_cm)^(1/3) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F,
#     control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_city_m3, type = "diag") # still very right-skewed... should take out zeroes and look at binomial, then quantatitative

# TAKING OUT PLANTS W/ZERO SCAR LENGTH & FITTING A BINOMIAL MODEL
## THEN I'LL USE >0 DATA AND LOOK AT QUANTITATIVE MEASUREMENTS
weev_urbsubs_city_m4 <- glmer((Scar_length_cm_binary) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
  data = weevil_both %>% filter(Urb_Rur == "Urban"),
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(weev_urbsubs_city_m4)
plot(res)
# looks great! 

car::Anova(weev_urbsubs_city_m4) # not sig- so, whether the plant was attacked by weevils not associated with urbanization nor urban subtr


# main effects
weev_urbsubs_city_m4_ME <- glmer((Scar_length_cm_binary) ~ (1|Block) + (1|Population/Family) + City_dist + Transect_ID,
  data = weevil_both %>% filter(Urb_Rur == "Urban"),
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

# weev_urbsubs_city_m4 <- lmer(Scar_length_cm ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_city_m4, type='diag') #very right-skewed... try sqrt
# 
# weev_urbsubs_city_m5 <- lmer(sqrt(Scar_length_cm) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_city_m5, type='diag') #still right-skewed... though better... try cube root
# 
# weev_urbsubs_city_m6 <- lmer((Scar_length_cm)^(1/3) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_city_m6, type='diag') # looks pretty good! try log just in case
# 
# 
# weev_urbsubs_city_m7 <- lmer(log(Scar_length_cm + 0.1) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_city_m7, type='diag') # looks the same as cube root but maybe a little better? a bit of kurtosis thoughstill singular though. Take out block
# 
# weev_urbsubs_city_m8 <- lmer(log(Scar_length_cm) ~ (1|Population/Family) + City_dist* Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out Fam
# 
# weev_urbsubs_city_m9 <- lmer(log(Scar_length_cm) ~ (1|Block) +  (1|Population) + City_dist* Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out block too
# 
# weev_urbsubs_city_m10 <- lmer(log(Scar_length_cm) ~  (1|Population) + City_dist* Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... 

# try glmmTMB
weev_urbsubs_city_m11 <- glmmTMB(log(Scar_length_cm + 0.1) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
  data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
  family = gaussian) # it works! use this



# main effects
weev_urbsubs_city_m11_ME <- glmmTMB(log(Scar_length_cm + 0.1) ~ (1|Block) + (1|Population/Family) + City_dist + Transect_ID,
  data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
  family = gaussian) # it works! use this



# URB SUBTRANSECTS / URB SCORE-----

# weev_urbsubs_usc_m1 <- lmer(Scar_length_cm ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F)
# sjPlot::plot_model(weev_urbsubs_usc_m1, type = "diag") # right-skewed
# 
# weev_urbsubs_usc_m2 <- lmer(sqrt(Scar_length_cm) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F,
#     control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_usc_m2, type = "diag") # still very right-skewed...
# 
# weev_urbsubs_usc_m3 <- lmer((Scar_length_cm)^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(Urb_Rur == "Urban"),
#   REML = F,
#     control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_usc_m3, type = "diag") # still very right-skewed... should take out zeroes and look at binomial, then quantatitative

# TAKING OUT PLANTS W/ZERO SCAR LENGTH & FITTING A BINOMIAL MODEL
## THEN I'LL USE >0 DATA AND LOOK AT QUANTITATIVE MEASUREMENTS
weev_urbsubs_usc_m4 <- glmer((Scar_length_cm_binary) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
  data = weevil_both %>% filter(Urb_Rur == "Urban"),
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(weev_urbsubs_usc_m4)
plot(res)
# looks great! 

car::Anova(weev_urbsubs_usc_m4) # not sig- so, whether the plant was attacked by weevils not associated with urbanization nor urban subtr


# main effects
weev_urbsubs_usc_m4_ME <- glmer((Scar_length_cm_binary) ~ (1|Block) + (1|Population/Family) + Urb_score + Transect_ID,
  data = weevil_both %>% filter(Urb_Rur == "Urban"),
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

# weev_urbsubs_usc_m4 <- lmer(Scar_length_cm ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_usc_m4, type='diag') #very right-skewed... try sqrt
# 
# weev_urbsubs_usc_m5 <- lmer(sqrt(Scar_length_cm) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_usc_m5, type='diag') #still right-skewed... though better... try cube root
# 
# weev_urbsubs_usc_m6 <- lmer((Scar_length_cm)^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_usc_m6, type='diag') # looks pretty good... try log
# 
# 
# weev_urbsubs_usc_m7 <- lmer(log(Scar_length_cm + 0.1) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(weev_urbsubs_usc_m7, type='diag') # looks the same as cube root but maybe a little better? some kurtosis though still singular  Take out block
# 
# weev_urbsubs_usc_m8 <- lmer(log(Scar_length_cm) ~ (1|Population/Family) + Urb_score* Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out Fam
# 
# weev_urbsubs_usc_m9 <- lmer(log(Scar_length_cm) ~ (1|Block) +  (1|Population) + Urb_score* Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... take out block too
# 
# weev_urbsubs_usc_m10 <- lmer(log(Scar_length_cm) ~  (1|Population) + Urb_score* Transect_ID,
#   data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... 

# try glmmTMB
weev_urbsubs_usc_m11 <- glmmTMB(log(Scar_length_cm + 0.1) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
  data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
  family = gaussian) # it works! use this



# main effects
weev_urbsubs_usc_m11_ME <- glmmTMB(log(Scar_length_cm + 0.1) ~ (1|Block) + (1|Population/Family) + Urb_score + Transect_ID,
  data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
  family = gaussian) # it works! use this

```

### Entire gradient: *NOt sig for either
#### City_dist
```{r}
car::Anova(weev_gr_city_m3) # binomial: not sig
car::Anova(weev_gr_city_m11) # quantitative: not sig

# 
# 
# # ANy variation within families or populations?
# m.1 <- lmer(log(Scar_length_cm) ~ (1|Population/Family),
#             data = weevil_both %>% filter(Scar_length_cm_binary == 1),
#             REML = T)
# 
# ranova(m.1)
# # No for both
# 
# 
# sum.1 <- summary(m.1)
# 
# variances1 <- print(VarCorr(m.1),comp="Variance") %>%
#   as.data.frame() %>%
#   dplyr::mutate(., PVE = vcov / sum(vcov)) %>%
#   dplyr::select(., c(grp, vcov, PVE)) %>%
#   dplyr::rename(., Group = grp,
#                 Variance = vcov)
# 
# 
# write.table(ranova(m.1), here::here("./Figures_Tables/ranova_PVE/2020_Weevil_lmer_PVE.csv"), col.names=TRUE, sep=",")
# write.table(variances1, here::here("./Figures_Tables/ranova_PVE/2020_Weevil_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)
```


#### Urb_score
```{r}
car::Anova(weev_gr_usc_m3) # binomial: not sig
car::Anova(weev_gr_usc_m10) # quantitative: not sig

```


### Urban subtransects: *Transect sig for city_dist AND urb_score
#### City_dist
```{r}
car::Anova(weev_urbsubs_city_m4) # binomial: not sig
car::Anova(weev_urbsubs_city_m4_ME) # binomial: not sig
car::Anova(weev_urbsubs_city_m11) # quantitative: transect sig
car::Anova(weev_urbsubs_city_m11_ME) # quantitative main effects: transect sig

AIC(weev_urbsubs_city_m11, weev_urbsubs_city_m11_ME)# main effects lower AIC (less than 2)

# 
# 
# # ANy variation among families or populations?
# m.1 <- lmer(log(Scar_length_cm) ~ (1|Population/Family),
#               data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#             REML = T)
# ranova(m.1)
# # no
# 
# m.2 <- lmer(log(Scar_length_cm) ~ (1|Population/Family) + Transect_ID,
#               data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
# 
#             REML = F)
# car::Anova(m.2)
# # YES among transects 
# 
# 
# m.3 <- lmer(log(Scar_length_cm) ~ (1|Population/Family) + Transect_ID,
#               data = weevil_both %>% filter(Scar_length_cm_binary == 1 & Urb_Rur == "Urban"),
#             REML = T)
# car::Anova(m.3)
# # YES among transects
# 
# 
# sum.1 <- summary(m.1)
# 
# variances1 <- print(VarCorr(m.1),comp="Variance") %>%
#   as.data.frame() %>%
#   dplyr::mutate(., PVE = vcov / sum(vcov)) %>%
#   dplyr::select(., c(grp, vcov, PVE)) %>%
#   dplyr::rename(., Group = grp,
#                 Variance = vcov)
# 
# 
# write.table(ranova(m.1), here::here("./Figures_Tables/ranova_PVE/2020_Weevil_urban_lmer_PVE.csv"), col.names=TRUE, sep=",")
# write.table(variances1, here::here("./Figures_Tables/ranova_PVE/2020_Weevil_urban_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)
# write.table(car::Anova(m.2), here::here("./Figures_Tables/ranova_PVE/2020_Weevil_urban_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)

```

#### Urb_score
```{r}
car::Anova(weev_urbsubs_usc_m4) # binomial: not sig
car::Anova(weev_urbsubs_usc_m4_ME) # binomial: not sig
car::Anova(weev_urbsubs_usc_m11) # quantitative: transect sig
car::Anova(weev_urbsubs_usc_m11_ME) # quantitative main effects: transect sig

AIC(weev_urbsubs_usc_m11, weev_urbsubs_usc_m11_ME)# main effects lower AIC (less than 2)


```

### Export ANOVA
```{r}
# anova_table_flx(weev_gr_city_m3)
# anova_table_flx(weev_gr_city_m11)
# anova_table_flx(weev_gr_usc_m3)
# anova_table_flx(weev_gr_usc_m10)
# 
# anova_table_flx(weev_urbsubs_city_m4)
# anova_table_flx(weev_urbsubs_city_m4_ME) 
# anova_table_flx(weev_urbsubs_city_m11)
# anova_table_flx(weev_urbsubs_city_m11_ME)
# anova_table_flx(weev_urbsubs_usc_m4)
# anova_table_flx(weev_urbsubs_usc_m4_ME)
# anova_table_flx(weev_urbsubs_usc_m11)
# anova_table_flx(weev_urbsubs_usc_m11_ME)
# 
# 
# AIC_compare.city_dist_transf_binomial(weev_urbsubs_city_m4,
#                       weev_urbsubs_city_m4_ME)
# 
# AIC_compare.city_dist_transf_quantitative(weev_urbsubs_city_m11,
#                       weev_urbsubs_city_m11_ME)
# 
# AIC_compare.urb_score_transf_binomial(weev_urbsubs_usc_m4,
#                       weev_urbsubs_usc_m4_ME)
# 
# AIC_compare.urb_score_transf_quantitative(weev_urbsubs_usc_m11,
#                       weev_urbsubs_usc_m11_ME) 

```

## Herbivory
### July
#### glmer: diagnostics
```{r}
# Gradient / city_dist----------

# herb2020_gr_dist_m1 <- glmer(Herbivory.July_mean ~ (1|Block)  + (1|Population/Family) + City_dist,
#   data = herbivory_both_2020,
#   family = binomial,
#   control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# res <- simulateResiduals(herb2020_gr_dist_m1)
# plot(res)
# # major errors... try beta distribution
# 
# 
# herb2020_gr_dist_m2 <- glmmTMB(Herbivory.July_mean  ~ (1|Block) +  (1|Population/Family) + City_dist,
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# # Error in eval(family$initialize) : y values must be 0 < y < 1
# # recode: 0s as 0.00001 & 1 as 0.999999

herbivory_both_2020$Herbivory.July_mean_recode <- herbivory_both_2020$Herbivory.July_mean
herbivory_both_2020$Herbivory.July_mean_recode[herbivory_both_2020$Herbivory.July_mean == 1] <- 0.999999
herbivory_both_2020$Herbivory.July_mean_recode[herbivory_both_2020$Herbivory.July_mean == 0] <- 0.000001


# herb2020_gr_dist_m3 <- glmmTMB(Herbivory.July_mean_recode  ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020_gr_dist_m3)
# plot(res)
# # IT WORKS
# 
# hist(herbivory_both_2020$Herbivory.July_mean_recode, breaks = 30)
# summary(herb2020_gr_dist_m3)
# testDispersion(herb2020_gr_dist_m3)
# testZeroInflation(herb2020_gr_dist_m3)
# 
# # address overdispersion through an individual-level random effect
# herbivory_both_2020$ID <- seq.int(nrow(herbivory_both_2020))
# 
# herb2020_gr_dist_m4 <- glmmTMB(Herbivory.July_mean_recode  ~ (1|Block) + (1|Population/Family) + City_dist + (1|ID),
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020_gr_dist_m4)
# plot(res)
# # better but still not optimal
# 
# testDispersion(herb2020_gr_dist_m4) # is it underdispersed now?
# testZeroInflation(herb2020_gr_dist_m4)
# 
# # try binomial and then quantitative?



# recode plants as having height or not
herbivory_both_2020$Herbivory.July_mean_binary <- herbivory_both_2020$Herbivory.July_mean
herbivory_both_2020$Herbivory.July_mean_binary[herbivory_both_2020$Herbivory.July_mean_binary > 0] <- 1

herb2020_gr_dist_m5 <- glmer((Herbivory.July_mean_binary) ~ (1|Block) + (1|Population/Family) + City_dist,
  data = herbivory_both_2020,
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(herb2020_gr_dist_m5)
plot(res)
# looks great! 
summary(herb2020_gr_dist_m5)

car::Anova(herb2020_gr_dist_m5) # not sig


# herb2020_gr_dist_m6 <- lmer(Herbivory.July_mean ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020_gr_dist_m6, type='diag') #very right-skewed... try cube root
# 
# herb2020_gr_dist_m7 <- lmer(Herbivory.July_mean^(1/3) ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020_gr_dist_m7, type='diag') # still right-skewed... try log

herb2020_gr_dist_m8 <- lmer(log(Herbivory.July_mean) ~ (1|Block) + (1|Population/Family) + City_dist,
  data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1),
  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
sjPlot::plot_model(herb2020_gr_dist_m8, type='diag') # looks great!

car::Anova(herb2020_gr_dist_m8) # not sig




# Gradient / urb_score----------

# herb2020_gr_usc_m1 <-  glmer(Herbivory.July_mean ~ (1|Block)  + (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020,
#   family = binomial,
#   control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# res <- simulateResiduals(herb2020_gr_usc_m1)
# plot(res)
# # major errors... try beta distribution
# 
# 
# herb2020_gr_usc_m2 <- glmmTMB(Herbivory.July_mean  ~ (1|Block) +  (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# # Error in eval(family$initialize) : y values must be 0 < y < 1
# # recode: 0s as 0.00001 & 1 as 0.999999
# 
# 
# herb2020_gr_usc_m3 <- glmmTMB(Herbivory.July_mean_recode  ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020_gr_usc_m3)
# plot(res)
# # IT WORKS
# 
# hist(herbivory_both_2020$Herbivory.July_mean_recode, breaks = 30)
# summary(herb2020_gr_usc_m3)
# testDispersion(herb2020_gr_usc_m3)
# testZeroInflation(herb2020_gr_usc_m3)
# 
# # address overdispersion through an individual-level random effect
# herb2020_gr_usc_m4 <- glmmTMB(Herbivory.July_mean_recode  ~ (1|Block) + (1|Population/Family) + Urb_score + (1|ID),
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020_gr_usc_m4)
# plot(res)
# # better but still not optimal
# 
# testDispersion(herb2020_gr_usc_m4) # is it underdispersed now?
# testZeroInflation(herb2020_gr_usc_m4)
# 
# # try binomial and then quantitative?



# recode plants as having height or not
herb2020_gr_usc_m5 <- glmer((Herbivory.July_mean_binary) ~ (1|Block) + (1|Population/Family) + Urb_score,
  data = herbivory_both_2020,
  family = "binomial"(link="logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(herb2020_gr_usc_m5)
plot(res)
# looks great! 
summary(herb2020_gr_usc_m5)

car::Anova(herb2020_gr_usc_m5) # not sig


# herb2020_gr_usc_m6 <- lmer(Herbivory.July_mean ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020_gr_usc_m6, type='diag') #very right-skewed... try cube root
# 
# herb2020_gr_usc_m7 <- lmer(Herbivory.July_mean^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020_gr_usc_m7, type='diag') # still right-skewed... try log

herb2020_gr_usc_m8 <- lmer(log(Herbivory.July_mean) ~ (1|Block) + (1|Population/Family) + Urb_score,
  data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1),
  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
sjPlot::plot_model(herb2020_gr_usc_m8, type='diag') # looks great!

car::Anova(herb2020_gr_usc_m8) # not sig






# Urb sites / city_dist----------

# herb2020_urb_dist_m1 <- glmer(Herbivory.July_mean ~ (1|Block)  + (1|Population/Family) + City_dist * Transect_ID,
#     data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#     family = binomial,
#   control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# res <- simulateResiduals(herb2020_urb_dist_m1)
# plot(res)
# # major errors... try beta distribution
# 
# 
# herb2020_urb_dist_m2 <- glmmTMB(Herbivory.July_mean  ~ (1|Block) +  (1|Population/Family) + City_dist * Transect_ID,
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# # Error in eval(family$initialize) : y values must be 0 < y < 1
# # recode: 0s as 0.00001 & 1 as 0.999999
# 
# 
# herb2020_urb_dist_m3 <- glmmTMB(Herbivory.July_mean_recode  ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020_urb_dist_m3)
# plot(res)
# # IT WORKS
# 
# summary(herb2020_urb_dist_m3)
# testDispersion(herb2020_urb_dist_m3)
# testZeroInflation(herb2020_urb_dist_m3)
# 
# # address overdispersion through an individual-level random effect
# 
# herb2020_urb_dist_m4 <- glmmTMB(Herbivory.July_mean_recode  ~ (1|Block) + (1|Population/Family) + City_dist + (1|ID),
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020_urb_dist_m4)
# plot(res)
# # better but still not optimal
# 
# testDispersion(herb2020_urb_dist_m4) # is it underdispersed now?
# testZeroInflation(herb2020_urb_dist_m4)
# 
# # try binomial and then quantitative?


herb2020_urb_dist_m5 <- glmer((Herbivory.July_mean_binary) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
  data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
  family = "binomial"(link="logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(herb2020_urb_dist_m5)
plot(res)
# looks great! 
summary(herb2020_urb_dist_m5)

car::Anova(herb2020_urb_dist_m5) # city_dist sig


# main effects
herb2020_urb_dist_m5_ME <- glmer((Herbivory.July_mean_binary) ~ (1|Block) + (1|Population/Family) + City_dist + Transect_ID,
  data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
  family = "binomial"(link="logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

# herb2020_urb_dist_m6 <- lmer(Herbivory.July_mean ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020_urb_dist_m6, type='diag') #very right-skewed... try cube root
# 
# herb2020_urb_dist_m7 <- lmer(Herbivory.July_mean^(1/3) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020_urb_dist_m7, type='diag') # still right-skewed... try log

# herb2020_urb_dist_m8 <- lmer(log(Herbivory.July_mean) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020_urb_dist_m8, type='diag') # looks great! but stil singular... try glmmTMB

herb2020_urb_dist_m8 <- glmmTMB(log(Herbivory.July_mean) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
  data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Transect_ID != "Rural"),
  family = gaussian)
sjPlot::plot_model(herb2020_urb_dist_m8, type='diag') # looks great!

car::Anova(herb2020_urb_dist_m8) # interaction not sig

# main effects
herb2020_urb_dist_m8_ME <- glmmTMB(log(Herbivory.July_mean) ~ (1|Block) + (1|Population/Family) + City_dist + Transect_ID,
  data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Transect_ID != "Rural"),
  family = gaussian)



# Urb sites / urb_score----------

# herb2020_urb_usc_m1 <- glmer(Herbivory.July_mean ~ (1|Block)  + (1|Population/Family) + Urb_score * Transect_ID,
#     data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#     family = binomial,
#   control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# res <- simulateResiduals(herb2020_urb_usc_m1)
# plot(res)
# # major errors... try beta distribution
# 
# 
# herb2020_urb_usc_m2 <- glmmTMB(Herbivory.July_mean  ~ (1|Block) +  (1|Population/Family) + Urb_score * Transect_ID,
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# # Error in eval(family$initialize) : y values must be 0 < y < 1
# # recode: 0s as 0.00001 & 1 as 0.999999
# 
# 
# herb2020_urb_usc_m3 <- glmmTMB(Herbivory.July_mean_recode  ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020_urb_usc_m3)
# plot(res)
# # IT WORKS
# 
# summary(herb2020_urb_usc_m3)
# testDispersion(herb2020_urb_usc_m3)
# testZeroInflation(herb2020_urb_usc_m3)
# 
# # address overdispersion through an individual-level random effect
# 
# herb2020_urb_usc_m4 <- glmmTMB(Herbivory.July_mean_recode  ~ (1|Block) + (1|Population/Family) + Urb_score + (1|ID),
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020_urb_usc_m4)
# plot(res)
# # better but still not optimal
# 
# testDispersion(herb2020_urb_usc_m4) # is it underdispersed now?
# testZeroInflation(herb2020_urb_usc_m4)
# 
# # try binomial and then quantitative?


herb2020_urb_usc_m5 <- glmer((Herbivory.July_mean_binary) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
  data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
  family = "binomial"(link="logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(herb2020_urb_usc_m5)
plot(res)
# looks great! 
summary(herb2020_urb_usc_m5)

car::Anova(herb2020_urb_usc_m5) # Urb_score marg sig


# main effects
herb2020_urb_usc_m5_ME <- glmer((Herbivory.July_mean_binary) ~ (1|Block) + (1|Population/Family) + Urb_score + Transect_ID,
  data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
  family = "binomial"(link="logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

# herb2020_urb_usc_m6 <- lmer(Herbivory.July_mean ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020_urb_usc_m6, type='diag') #very right-skewed... try cube root
# 
# herb2020_urb_usc_m7 <- lmer(Herbivory.July_mean^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020_urb_usc_m7, type='diag') # still right-skewed... try log

herb2020_urb_usc_m8 <- lmer(log(Herbivory.July_mean) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
  data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Transect_ID != "Rural"),
  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
sjPlot::plot_model(herb2020_urb_usc_m8, type='diag') # looks great!

car::Anova(herb2020_urb_usc_m8) # nothing sig

# main effects
herb2020_urb_usc_m8_ME <- lmer(log(Herbivory.July_mean) ~ (1|Block) + (1|Population/Family) + Urb_score + Transect_ID,
  data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Transect_ID != "Rural"),
  control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))


```

#### Entire gradient: *Not sig for either
##### City_dist
```{r}
car::Anova(herb2020_gr_dist_m5) # binomial: not sig
car::Anova(herb2020_gr_dist_m8) # quantitative: not sig



# 
# # ANy variation within families or populations?
# m.1 <- lmer(log(Herbivory.July_mean) ~ (1|Population/Family),
#             data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1),
#             REML = T,
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# ranova(m.1)
# # No for both
# 
# 
# sum.1 <- summary(m.1)
# 
# variances1 <- print(VarCorr(m.1),comp="Variance") %>%
#   as.data.frame() %>%
#   dplyr::mutate(., PVE = vcov / sum(vcov)) %>%
#   dplyr::select(., c(grp, vcov, PVE)) %>%
#   dplyr::rename(., Group = grp,
#                 Variance = vcov)
# 
# 
# write.table(ranova(m.1), here::here("./Figures_Tables/ranova_PVE/2020_HerbivoryJuly_lmer_PVE.csv"), col.names=TRUE, sep=",")
# write.table(variances1, here::here("./Figures_Tables/ranova_PVE/2020_HerbivoryJuly_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)
```

##### Urb_score
```{r}
car::Anova(herb2020_gr_usc_m5) # binomial: not sig
car::Anova(herb2020_gr_usc_m8) # quantitative: not sig

```


#### Urban subtransects: *Sig for city_dist (binomial and quantitative), marg sig for binomial (urb_score)
##### City_dist
```{r}
car::Anova(herb2020_urb_dist_m5) # binomial: city_dist sig
car::Anova(herb2020_urb_dist_m5_ME) # binomial: city_dist sig
car::Anova(herb2020_urb_dist_m8) # quantitative: city_dist sig
car::Anova(herb2020_urb_dist_m8_ME) # quantitative main effects: city_dist sig

AIC(herb2020_urb_dist_m5, herb2020_urb_dist_m5_ME) # very close
AIC(herb2020_urb_dist_m8, herb2020_urb_dist_m8_ME) # main effects has lower AIC ... but the interaxn is sig so ME model isn't relevant

# 
# 
# # ANy variation among families or populations?
# m.1 <- lmer(log(Herbivory.July_mean) ~  (1|Population/Family) + City_dist ,
#   data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)),
#   REML = T)
# 
# ranova(m.1)
# # no
# 
# m.2 <- lmer(log(Herbivory.July_mean) ~ (1|Population/Family) + Transect_ID,
#               data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Urb_Rur == "Urban"),
# 
#             REML = F)
# car::Anova(m.2)
# # not among transects either
# 
# 
# m.3 <- lmer(log(Herbivory.July_mean) ~ (1|Population/Family) + Transect_ID,
#               data = herbivory_both_2020 %>% filter(Herbivory.July_mean_binary == 1 & Urb_Rur == "Urban"),
#             REML = T)
# car::Anova(m.3)
# # also not sig among transects
# 
# 
# sum.1 <- summary(m.1)
# 
# variances1 <- print(VarCorr(m.1),comp="Variance") %>%
#   as.data.frame() %>%
#   dplyr::mutate(., PVE = vcov / sum(vcov)) %>%
#   dplyr::select(., c(grp, vcov, PVE)) %>%
#   dplyr::rename(., Group = grp,
#                 Variance = vcov)
# 
# 
# write.table(ranova(m.1), here::here("./Figures_Tables/ranova_PVE/2020_HerbivoryJuly_urban_lmer_PVE.csv"), col.names=TRUE, sep=",")
# write.table(variances1, here::here("./Figures_Tables/ranova_PVE/2020_HerbivoryJuly_urban_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)
# write.table(car::Anova(m.2), here::here("./Figures_Tables/ranova_PVE/2020_HerbivoryJuly_urban_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)
```

##### Urb_score
```{r}
car::Anova(herb2020_urb_usc_m5) # binomial: urb_score marg sig
car::Anova(herb2020_urb_usc_m5_ME) # binomial: urb_score marg sig
car::Anova(herb2020_urb_usc_m8) # quantitative: nothing sig
car::Anova(herb2020_urb_usc_m8_ME) # quantitative main effects: not sig

AIC(herb2020_urb_usc_m5, herb2020_urb_usc_m5_ME) # very close
AIC(herb2020_urb_usc_m8, herb2020_urb_usc_m8_ME)
# main effects has lower AIC
```


#### Export ANOVA
```{r}
# anova_table_flx(herb2020_gr_dist_m5)
# anova_table_flx(herb2020_gr_dist_m8)
# anova_table_flx(herb2020_gr_usc_m5)
# anova_table_flx(herb2020_gr_usc_m8)
# 
# anova_table_flx(herb2020_urb_dist_m5)
# anova_table_flx(herb2020_urb_dist_m5_ME)
# anova_table_flx(herb2020_urb_dist_m8)
# anova_table_flx(herb2020_urb_dist_m8_ME)
# anova_table_flx(herb2020_urb_usc_m5)
# anova_table_flx(herb2020_urb_usc_m5_ME)
# anova_table_flx(herb2020_urb_usc_m8)
# anova_table_flx(herb2020_urb_usc_m8_ME)
# 
# AIC_compare.city_dist_transf_binomial(herb2020_urb_dist_m5,
#                       herb2020_urb_dist_m5_ME)
# 
# AIC_compare.city_dist_transf_quantitative(herb2020_urb_dist_m8,
#                       herb2020_urb_dist_m8_ME)
#     
# AIC_compare.urb_score_transf_binomial(herb2020_urb_usc_m5,
#                       herb2020_urb_usc_m5_ME)
# 
# AIC_compare.urb_score_transf_quantitative(herb2020_urb_usc_m8,
#                                           herb2020_urb_usc_m8_ME)
```


### Sept
#### glmer: diagnostics
```{r}
# Gradient / city_dist----------

# herb2020.S_gr_dist_m1 <- glmer(Herbivory.Sept_mean ~ (1|Block)  + (1|Population/Family) + City_dist,
#   data = herbivory_both_2020,
#   family = binomial,
#   control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# res <- simulateResiduals(herb2020.S_gr_dist_m1)
# plot(res)
# # major errors... try beta distribution
# 
# 
# herb2020.S_gr_dist_m2 <- glmmTMB(Herbivory.Sept_mean  ~ (1|Block) +  (1|Population/Family) + City_dist,
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# # Error in eval(family$initialize) : y values must be 0 < y < 1
# # recode: 0s as 0.00001 & 1 as 0.999999

herbivory_both_2020$Herbivory.Sept_mean_recode <- herbivory_both_2020$Herbivory.Sept_mean
herbivory_both_2020$Herbivory.Sept_mean_recode[herbivory_both_2020$Herbivory.Sept_mean == 1] <- 0.999999
herbivory_both_2020$Herbivory.Sept_mean_recode[herbivory_both_2020$Herbivory.Sept_mean == 0] <- 0.000001



# herb2020.S_gr_dist_m3 <- glmmTMB(Herbivory.Sept_mean_recode  ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020.S_gr_dist_m3)
# plot(res)
# # IT WORKS
# 
# hist(herbivory_both_2020$Herbivory.Sept_mean_recode, breaks = 30)
# summary(herb2020.S_gr_dist_m3)
# testDispersion(herb2020.S_gr_dist_m3)
# testZeroInflation(herb2020.S_gr_dist_m3)
# 
# # address overdispersion through an individual-level random effect
# 
# herb2020.S_gr_dist_m4 <- glmmTMB(Herbivory.Sept_mean_recode  ~ (1|Block) + (1|Population/Family) + City_dist + (1|ID),
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020.S_gr_dist_m4)
# plot(res)
# # better but still not optimal
# 
# 
# # try binomial and then quantitative?

# recode plants as having height or not
herbivory_both_2020$Herbivory.Sept_mean_binary <- herbivory_both_2020$Herbivory.Sept_mean
herbivory_both_2020$Herbivory.Sept_mean_binary[herbivory_both_2020$Herbivory.Sept_mean_binary > 0] <- 1

herb2020.S_gr_dist_m5 <- glmer((Herbivory.Sept_mean_binary) ~ (1|Block) + (1|Population/Family) + City_dist,
  data = herbivory_both_2020,
  family = "binomial"(link="logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(herb2020.S_gr_dist_m5)
plot(res)
# looks great! 
summary(herb2020.S_gr_dist_m5)

car::Anova(herb2020.S_gr_dist_m5) # marg sig


# herb2020.S_gr_dist_m6 <- lmer(Herbivory.Sept_mean ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_gr_dist_m6, type='diag') #very right-skewed... try cube root
# 
# herb2020.S_gr_dist_m7 <- lmer(Herbivory.Sept_mean^(1/3) ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_gr_dist_m7, type='diag') # still right-skewed... try log
# 
# herb2020.S_gr_dist_m8 <- lmer(log(Herbivory.Sept_mean) ~ (1|Block) + (1|Population/Family) + City_dist,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_gr_dist_m8, type='diag') # looks good but still singular... try removing block
# 
# herb2020.S_gr_dist_m9 <- lmer(log(Herbivory.Sept_mean) ~  (1|Population/Family) + City_dist,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... remove Fam instead
# 
# herb2020.S_gr_dist_m10 <- lmer(log(Herbivory.Sept_mean) ~ (1|Population) + (1|Block) + City_dist,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... remove block
# 
# herb2020.S_gr_dist_m11 <- lmer(log(Herbivory.Sept_mean) ~ (1|Population) + City_dist,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... 

# try glmmTMB
herb2020.S_gr_dist_m12 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population) + City_dist,
  data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
  family = gaussian) # it works! use this

# test1 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population/Family) + City_dist,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   family = gaussian) # singular
# 
# test1 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population) + (1|Block) + City_dist,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   family = gaussian) # singular




# Gradient / urb_score----------

# herb2020.S_gr_usc_m1 <-  glmer(Herbivory.Sept_mean ~ (1|Block)  + (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020,
#   family = binomial,
#   control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# res <- simulateResiduals(herb2020.S_gr_usc_m1)
# plot(res)
# # major errors... try beta distribution
# 
# 
# herb2020.S_gr_usc_m2 <- glmmTMB(Herbivory.Sept_mean  ~ (1|Block) +  (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# # Error in eval(family$initialize) : y values must be 0 < y < 1
# # recode: 0s as 0.00001 & 1 as 0.999999
# 
# 
# herb2020.S_gr_usc_m3 <- glmmTMB(Herbivory.Sept_mean_recode  ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020.S_gr_usc_m3)
# plot(res)
# # IT WORKS
# 
# hist(herbivory_both_2020$Herbivory.Sept_mean_recode, breaks = 30)
# summary(herb2020.S_gr_usc_m3)
# testDispersion(herb2020.S_gr_usc_m3)
# testZeroInflation(herb2020.S_gr_usc_m3)
# 
# # address overdispersion through an individual-level random effect
# herb2020.S_gr_usc_m4 <- glmmTMB(Herbivory.Sept_mean_recode  ~ (1|Block) + (1|Population/Family) + Urb_score + (1|ID),
#   data = herbivory_both_2020,
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020.S_gr_usc_m4)
# plot(res)
# # better but still not optimal
# 
# 
# # try binomial and then quantitative?



# recode plants as having height or not
herb2020.S_gr_usc_m5 <- glmer((Herbivory.Sept_mean_binary) ~ (1|Block) + (1|Population/Family) + Urb_score,
  data = herbivory_both_2020,
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(herb2020.S_gr_usc_m5)
plot(res)
# looks great! 
summary(herb2020.S_gr_usc_m5)

car::Anova(herb2020.S_gr_usc_m5) # not sig


# herb2020.S_gr_usc_m6 <- lmer(Herbivory.Sept_mean ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_gr_usc_m6, type='diag') #very right-skewed... try cube root
# 
# herb2020.S_gr_usc_m7 <- lmer(Herbivory.Sept_mean^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_gr_usc_m7, type='diag') # still right-skewed... try log
# 
# herb2020.S_gr_usc_m8 <- lmer(log(Herbivory.Sept_mean) ~ (1|Block) + (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_gr_usc_m8, type='diag') # looks great! but still singular... try removing block
# 
# herb2020.S_gr_usc_m9 <- lmer(log(Herbivory.Sept_mean) ~  (1|Population/Family) + Urb_score,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... remove  Fam instead
# 
# herb2020.S_gr_usc_m10 <- lmer(log(Herbivory.Sept_mean) ~ (1|Population) + (1|Block) + Urb_score,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... remove block
# 
# herb2020.S_gr_usc_m11 <- lmer(log(Herbivory.Sept_mean) ~ (1|Population) + Urb_score,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... 

# try glmmTMB
test1 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population) + Urb_score,
  data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
  family = gaussian) # it works!

test1 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population/Family) + Urb_score,
  data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
  family = gaussian) # it works!

herb2020.S_gr_usc_m12 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population) + (1|Block) + Urb_score,
  data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
  family = gaussian) # it works! use this



# Urb sites / city_dist----------

# herb2020.S_urb_dist_m1 <- glmer(Herbivory.Sept_mean ~ (1|Block)  + (1|Population/Family) + City_dist * Transect_ID,
#     data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#     family = binomial,
#   control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# res <- simulateResiduals(herb2020.S_urb_dist_m1)
# plot(res)
# # major errors... try beta distribution
# 
# 
# herb2020.S_urb_dist_m2 <- glmmTMB(Herbivory.Sept_mean  ~ (1|Block) +  (1|Population/Family) + City_dist * Transect_ID,
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# # Error in eval(family$initialize) : y values must be 0 < y < 1
# # recode: 0s as 0.00001 & 1 as 0.999999
# 
# 
# herb2020.S_urb_dist_m3 <- glmmTMB(Herbivory.Sept_mean_recode  ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020.S_urb_dist_m3)
# plot(res)
# # IT WORKS
# 
# summary(herb2020.S_urb_dist_m3)
# testDispersion(herb2020.S_urb_dist_m3)
# testZeroInflation(herb2020.S_urb_dist_m3)
# 
# # address overdispersion through an individual-level random effect
# 
# herb2020.S_urb_dist_m4 <- glmmTMB(Herbivory.Sept_mean_recode  ~ (1|Block) + (1|Population/Family) + City_dist + (1|ID),
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020.S_urb_dist_m4)
# plot(res)
# # better but still not optimal
# 
# testDispersion(herb2020.S_urb_dist_m4) # is it underdispersed now?
# testZeroInflation(herb2020.S_urb_dist_m4)
# 
# # try binomial and then quantitative?


herb2020.S_urb_dist_m5 <- glmer((Herbivory.Sept_mean_binary) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
  data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(herb2020.S_urb_dist_m5)
plot(res)
# looks great! but there's an outlier?
testOutliers(herb2020.S_urb_dist_m5) # no
summary(herb2020.S_urb_dist_m5)

car::Anova(herb2020.S_urb_dist_m5) # nothing sig

# main effects:
herb2020.S_urb_dist_m5_ME <- glmer((Herbivory.Sept_mean_binary) ~ (1|Block) + (1|Population/Family) + City_dist + Transect_ID,
  data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))


# herb2020.S_urb_dist_m6 <- lmer(Herbivory.Sept_mean ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_urb_dist_m6, type='diag') #very right-skewed... try cube root
# 
# herb2020.S_urb_dist_m7 <- lmer(Herbivory.Sept_mean^(1/3) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_urb_dist_m7, type='diag') # still right-skewed... try log
# 
# herb2020.S_urb_dist_m8 <- lmer(log(Herbivory.Sept_mean) ~ (1|Block) + (1|Population/Family) + City_dist * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_urb_dist_m8, type='diag') # looks good but still singular... try removing block
# 
# herb2020.S_urb_dist_m9 <- lmer(log(Herbivory.Sept_mean) ~  (1|Population/Family) + City_dist * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... try removing Fam instead
# 
# herb2020.S_urb_dist_m10 <- lmer(log(Herbivory.Sept_mean) ~ (1|Population) + (1|Block) + City_dist* Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... remove block
# 
# herb2020.S_urb_dist_m11 <- lmer(log(Herbivory.Sept_mean) ~ (1|Population) + City_dist* Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... 

# try glmmTMB
# test1 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population) + City_dist* Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   family = gaussian) # it works!

herb2020.S_urb_dist_m12 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population/Family) + City_dist* Transect_ID,
  data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
  family = gaussian) # it works! use this

# test1 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population) + (1|Block) + City_dist* Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   family = gaussian) # singular


# main effects
herb2020.S_urb_dist_m12_ME <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population/Family) + City_dist + Transect_ID,
  data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
  family = gaussian)



# Urb sites / urb_score----------

# herb2020.S_urb_usc_m1 <- glmer(Herbivory.Sept_mean ~ (1|Block)  + (1|Population/Family) + Urb_score * Transect_ID,
#     data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#     family = binomial,
#   control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# res <- simulateResiduals(herb2020.S_urb_usc_m1)
# plot(res)
# # major errors... try beta distribution
# 
# 
# herb2020.S_urb_usc_m2 <- glmmTMB(Herbivory.Sept_mean  ~ (1|Block) +  (1|Population/Family) + Urb_score * Transect_ID,
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# # Error in eval(family$initialize) : y values must be 0 < y < 1
# # recode: 0s as 0.00001 & 1 as 0.999999
# 
# 
# herb2020.S_urb_usc_m3 <- glmmTMB(Herbivory.Sept_mean_recode  ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020.S_urb_usc_m3)
# plot(res)
# # IT WORKS
# 
# summary(herb2020.S_urb_usc_m3)
# testDispersion(herb2020.S_urb_usc_m3)
# testZeroInflation(herb2020.S_urb_usc_m3)
# 
# # address overdispersion through an individual-level random effect
# 
# herb2020.S_urb_usc_m4 <- glmmTMB(Herbivory.Sept_mean_recode  ~ (1|Block) + (1|Population/Family) + Urb_score + (1|ID),
#   data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
#   family = beta_family(link="logit"))
# res <- simulateResiduals(herb2020.S_urb_usc_m4)
# plot(res)
# # better but still not optimal
# 
# testDispersion(herb2020.S_urb_usc_m4) # is it underdispersed now?
# testZeroInflation(herb2020.S_urb_usc_m4)
# 
# # try binomial and then quantitative?


herb2020.S_urb_usc_m5 <- glmer((Herbivory.Sept_mean_binary) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
  data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

res <- simulateResiduals(herb2020.S_urb_usc_m5)
plot(res)
# looks great! 
summary(herb2020.S_urb_usc_m5)

car::Anova(herb2020.S_urb_usc_m5) # nothing sig


# main effects
herb2020.S_urb_usc_m5_ME <- glmer((Herbivory.Sept_mean_binary) ~ (1|Block) + (1|Population/Family) + Urb_score + Transect_ID,
  data = herbivory_both_2020 %>% dplyr::filter(., Transect_ID != "Rural"),
  family = "binomial"(link = "logit"),
  nAGQ = 0,
  control=glmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))

# herb2020.S_urb_usc_m6 <- lmer(Herbivory.Sept_mean ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_urb_usc_m6, type='diag') #very right-skewed... try cube root
# 
# herb2020.S_urb_usc_m7 <- lmer(Herbivory.Sept_mean^(1/3) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_urb_usc_m7, type='diag') # still right-skewed... try log
# 
# herb2020.S_urb_usc_m8 <- lmer(log(Herbivory.Sept_mean) ~ (1|Block) + (1|Population/Family) + Urb_score * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# sjPlot::plot_model(herb2020.S_urb_usc_m8, type='diag') # looks great  but still singular... try removing block
# 
# herb2020.S_urb_usc_m9 <- lmer(log(Herbivory.Sept_mean) ~  (1|Population/Family) + Urb_score * Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... try removing Fam instead
# 
# herb2020.S_urb_usc_m10 <- lmer(log(Herbivory.Sept_mean) ~ (1|Population) + (1|Block) + Urb_score* Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... remove block
# 
# herb2020.S_urb_usc_m11 <- lmer(log(Herbivory.Sept_mean) ~ (1|Population) + Urb_score* Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5))) # still singular... 

# try glmmTMB
# test1 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population) + Urb_score* Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   family = gaussian) # it works!

herb2020.S_urb_usc_m12 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population/Family) + Urb_score* Transect_ID,
  data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
  family = gaussian) # it works! use this
# 
# test1 <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population) + (1|Block) + Urb_score* Transect_ID,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   family = gaussian) # singular



# main effects
herb2020.S_urb_usc_m12_ME <- glmmTMB(log(Herbivory.Sept_mean) ~ (1|Population/Family) + Urb_score + Transect_ID,
  data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
  family = gaussian) 


```
#### Entire gradient: *Marg sig for city_dist (nothing for urb_score)
##### City_dist
```{r}
car::Anova(herb2020.S_gr_dist_m5) # binomial: marginally sig
car::Anova(herb2020.S_gr_dist_m12) # quantitative: not sig

# 
# # ANy variation within families or populations?
# m.1 <- lmer(log(Herbivory.Sept_mean) ~ (1|Population/Family),
#             data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1),
#             REML = T,
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)))
# 
# ranova(m.1)
# # No for both
# 
# 
# sum.1 <- summary(m.1)
# 
# variances1 <- print(VarCorr(m.1),comp="Variance") %>%
#   as.data.frame() %>%
#   dplyr::mutate(., PVE = vcov / sum(vcov)) %>%
#   dplyr::select(., c(grp, vcov, PVE)) %>%
#   dplyr::rename(., Group = grp,
#                 Variance = vcov)
# 
# # even when I use glmmTMB model, I still get tiny variances- on par with the singular model.
# ## print(VarCorr(herb2020.S_gr_dist_m12),comp="Variance") 
# 
# 
# write.table(ranova(m.1), here::here("./Figures_Tables/ranova_PVE/2020_HerbivorySept_lmer_PVE.csv"), col.names=TRUE, sep=",")
# write.table(variances1, here::here("./Figures_Tables/ranova_PVE/2020_HerbivorySept_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)
```

##### Urb_score
```{r}
car::Anova(herb2020.S_gr_usc_m5) # binomial: not sig
car::Anova(herb2020.S_gr_usc_m12) # quantitative: not sig

```


#### Urban subtransects: *Nothing sig for either
##### City_dist
```{r}
car::Anova(herb2020.S_urb_dist_m5) # binomial: nothing sig
car::Anova(herb2020.S_urb_dist_m5_ME) # binomial: nothing sig
car::Anova(herb2020.S_urb_dist_m12) # quantitative: nothing sig
car::Anova(herb2020.S_urb_dist_m12_ME) # quantitative main effects: not sig

AIC(herb2020.S_urb_dist_m12, herb2020.S_urb_dist_m12_ME)
# main effects has lower AIC
# 
# 
# 
# # ANy variation among families or populations?
# m.1 <- lmer(log(Herbivory.Sept_mean) ~  (1|Population/Family) + City_dist ,
#   data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Transect_ID != "Rural"),
#   control=lmerControl(optimizer="bobyqa", optCtrl=list(maxfun=2e5)),
#   REML = T)
# 
# ranova(m.1)
# # no
# 
# m.2 <- lmer(log(Herbivory.Sept_mean) ~ (1|Population/Family) + Transect_ID,
#               data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Urb_Rur == "Urban"),
# 
#             REML = F)
# car::Anova(m.2)
# # not among transects either
# 
# 
# m.3 <- lmer(log(Herbivory.Sept_mean) ~ (1|Population/Family) + Transect_ID,
#               data = herbivory_both_2020 %>% filter(Herbivory.Sept_mean_binary == 1 & Urb_Rur == "Urban"),
#             REML = T)
# car::Anova(m.3)
# # also not sig among transects
# 
# 
# sum.1 <- summary(m.1)
# 
# variances1 <- print(VarCorr(m.1),comp="Variance") %>%
#   as.data.frame() %>%
#   dplyr::mutate(., PVE = vcov / sum(vcov)) %>%
#   dplyr::select(., c(grp, vcov, PVE)) %>%
#   dplyr::rename(., Group = grp,
#                 Variance = vcov)
# 
# 
# write.table(ranova(m.1), here::here("./Figures_Tables/ranova_PVE/2020_HerbivorySept_urban_lmer_PVE.csv"), col.names=TRUE, sep=",")
# write.table(variances1, here::here("./Figures_Tables/ranova_PVE/2020_HerbivorySept_urban_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)
# write.table(car::Anova(m.2), here::here("./Figures_Tables/ranova_PVE/2020_HerbivorySept_urban_lmer_PVE.csv"), col.names=TRUE, sep=",", append=TRUE)
```

##### Urb_score
```{r}
car::Anova(herb2020.S_urb_usc_m5) # binomial: ntohing sig
car::Anova(herb2020.S_urb_usc_m5_ME)# binomial: ntohing sig
car::Anova(herb2020.S_urb_usc_m12) # quantitative: nothing sig
car::Anova(herb2020.S_urb_usc_m12_ME) # quantitative main effects: not sig

AIC(herb2020.S_urb_usc_m12, herb2020.S_urb_usc_m12_ME)
# main effects has lower AIC
```



#### Export ANOVA
```{r}
# anova_table_flx(herb2020.S_gr_dist_m5)
# anova_table_flx(herb2020.S_gr_dist_m12)
# anova_table_flx(herb2020.S_gr_usc_m5)
# anova_table_flx(herb2020.S_gr_usc_m12)
# 
# anova_table_flx(herb2020.S_urb_dist_m5)
# anova_table_flx(herb2020.S_urb_dist_m5_ME)
# anova_table_flx(herb2020.S_urb_dist_m12)
# anova_table_flx(herb2020.S_urb_dist_m12_ME)
# anova_table_flx(herb2020.S_urb_usc_m5)
# anova_table_flx(herb2020.S_urb_usc_m5_ME)
# anova_table_flx(herb2020.S_urb_usc_m12)
# anova_table_flx(herb2020.S_urb_usc_m12_ME)
# 
# AIC_compare.city_dist_transf_binomial(herb2020.S_urb_dist_m5,
#                       herb2020.S_urb_dist_m5_ME)
# 
# AIC_compare.city_dist_transf_quantitative(herb2020.S_urb_dist_m12,
#                       herb2020.S_urb_dist_m12_ME)
#     
# AIC_compare.urb_score_transf_binomial(herb2020.S_urb_usc_m5,
#                       herb2020.S_urb_usc_m5_ME)
# 
# AIC_compare.urb_score_transf_quantitative(herb2020.S_urb_usc_m12,
#                                           herb2020.S_urb_usc_m12_ME)

```

